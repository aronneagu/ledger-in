#!/bin/bash
# arguments: transaction_description account sum [commodity] [account sum [commodity]]
# separate command line arguments based on tokens into triple of account_name-sum-commodity
# tell where to put the commodity, prefix or suffix of the sum
# make it as simple as possible and not a tad more complicated
# might be complicated adding currency. just use a default currency defined in this script
#currency="$"
#currency=" EUR"
#might solve spacing issue of currency before or after sum

# Variables defined by use
currency=""

USAGE="usage"
#exec 5> ledger.log
#BASH_XTRACEFD="5"
#set -x

# check if LEDGER_FILE exists
if [ ! -f "$LEDGER_FILE" ];then
    echo "Ledger file not found"
    exit 1
fi

# if number of arguments is 0 then print usage
if [ "$#" -le "2" ]; then
    echo $USAGE
    exit 1
fi

current_date=$(date +%Y-%m-%d)
description=$1
shift
echo "$current_date $description" >> "$LEDGER_FILE"

while (( "$#" ));do
ammount=$2
# get the account name, based on $1
account_number=$(grep -i $1 "$LEDGER_FILE"|awk '{print$1}'|sort|uniq|wc -l)
if [ "$account_number" == "0" ];then
    read -p "Account $1 does not exist. Do you want to create [Y/n]?: " account
    if [ -z "$account" ] || [ "$account" == "y" ];then
        account=$1
    else
        exit 1
    fi
elif [ "$account_number" == "1" ];then
    account=$(grep -i $1 "$LEDGER_FILE"|awk '{print$1}'|uniq)
elif [ "$account_number" -gt "1" ];then
    echo "Select account you want to use:"
    declare -a accounts=($(grep -i $1 "$LEDGER_FILE"|awk '{print$1}'|sort|uniq))
    for i in $(seq 0 $(( ${#accounts[@]}-1 )) );do
        echo "[$i] ${accounts[i]}"
    done
    read -p "Selection [0]:" selection
    if [ -z "$selection" ]; then
        account=${accounts[0]}
    else
        account=${accounts[$selection]}
    fi
fi
echo -e "  $account \t$ammount $currency" >> "$LEDGER_FILE"
if [ "$#" -ge "2" ];then
    shift 2
elif [ "$#" == "1" ];then
    shift
fi
done

# for style, add a new line between transactions
echo >> "$LEDGER_FILE"
